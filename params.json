{"name":"Servlet IO","tagline":"Servlet IO - convert your servlets to MVC controllers","body":"[test](#add-dependency)\r\n\r\n##Note\r\n*Supported since Servlet* **3.0.1** *or higher, and Java* **6** *or higher*\r\n\r\n## Quick installation\r\n#### Add repository:\r\n```xml\r\n<repository>\r\n    <id>jitpack.io</id>\r\n    <url>https://jitpack.io</url>\r\n</repository>\r\n```\r\n#### Add dependency:\r\n```xml\r\n<dependency>\r\n    <groupId>com.github.zerh</groupId>\r\n    <artifactId>ServletIO</artifactId>\r\n    <version>eb986730b6</version>\r\n</dependency>\r\n```\r\n\r\n## Getting Started\r\nAdd **\"/*\"** to your mapped url, example: ```@WebServlet(\"/your-path/*\")```, and replace the super class ```HttpServlet``` by ```ServletIO```.\r\n\r\n```java\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport servletio.*;\r\nimport servletio.annotation.Get;\r\n\r\n@WebServlet(\"/base-path/*\")\r\npublic class MyApp extends ServletIO {\r\n    \r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) {\r\n        super.doGet(request, response);\r\n        //your old code\r\n    }\r\n    \r\n    @Get\r\n    public Result hello(Request req){\r\n        return respond(\"<h1>hello world</h1>\").as(\"text/html\");\r\n    }\r\n}\r\n\r\n```\r\nOr put your old ```doGet``` code inside another method mapped with the base path:\r\n```java\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport servletio.*;\r\nimport servletio.annotation.Get;\r\n\r\n@WebServlet(\"/base-path/*\")\r\npublic class MyApp extends ServletIO {\r\n\r\n    @Get(\"/\")\r\n    public void oldCode(Request req, Response res){\r\n        HttpServletRequest request = req.raw;\r\n        HttpServletResponse response = res.raw;\r\n        \r\n        //old code\r\n    }\r\n\r\n    @Get\r\n    public Result hello(Request req){\r\n        return respond(\"<h1>hello world</h1>\").as(\"text/html\");\r\n    }\r\n}\r\n```\r\n\r\n### HTTP routing\r\nThe parameters could be mapped in the url using **\":\"** before the parameter name:\r\n\r\n```java\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport servletio.*;\r\nimport servletio.annotation.*;\r\n\r\n@WebServlet(\"/base-path/*\")\r\npublic class MyApp extends ServletIO {\r\n    \r\n    @Get(\"/edit/:id\")\r\n    public Result edit(Request req){\r\n        return respond(\"<h1>the url has: \" + req.param(\":id\") + \"</h1>\").as(\"text/html\");\r\n    }\r\n}\r\n```\r\n\r\nOf course, you also can use ```@Post```, ```@Put```, ```@Delete``` and ```@Options```\r\n\r\n### Result\r\n\r\n```Result``` is just an elegant way to declare controllers methods. The ```Result``` object wraps with ```ServletIO``` the methods printers of the ```Response``` object, to produce standard HTTP results. The methods```as(String contentType)```, ```withCookies(Cookies... cookies)``` and ```withDiscardingCookies(Cookies... cookies)``` and others returns the same instance of the ```Result``` object.\r\n\r\nServletIO contains some helper methods that return objects Result:\r\n\r\n- ```respond(String content)``` returns HTTP results with the 200 code.\r\n- ```internalServerError(String content)``` returns HTTP results with the 500 code.\r\n- ```sendFile(InputStream inputStream)``` send file to client.\r\n- ```badRequest(String optionalContent)```returns HTTP results with the 400 code.\r\n- ```notFound(String optionalContent)``` returns HTTP results with the 404 code.\r\n- ```redirect(String target)``` redirect to the target.\r\n- ```temporaryRedirect(String target)``` redirect to the target with 303 code\r\n\r\n### @Before and @After\r\n\r\nMethods annotated with the ```@Before``` annotation are executed before each action call for ```ServletIO```, and methods annotated with the ```@After``` annotation are executed after each action call for the Servlet:\r\n\r\n```java\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport servletio.*;\r\nimport servletio.annotation.*;\r\n\r\n@WebServlet(\"/base-path/*\")\r\npublic class MyApp extends ServletIO {\r\n\r\n    @Get\r\n    public Result index(Request req){\r\n        return respond(\"<h1>hello world</h1>\").as(\"text/html\");\r\n    }\r\n    \r\n    @Before\r\n    public void validateUser(Request req, Response res){\r\n        if(req.session().attribute(\"user\")==null)\r\n            res.printHtml(\"bye bye!!\");\r\n    }\r\n    \r\n    @After\r\n    public void log(Request req, Response res){\r\n        System.out.println(\"Action executed...\");\r\n    }\r\n    \r\n    @After\r\n    public Result onNotFound(Request req){\r\n        if(!isMapped(req))\r\n            return notFound(\"<h1>404, not found</h1>\").as(\"text/html\");\r\n        \r\n        return null;\r\n    }\r\n\r\n}\r\n```\r\n\r\nIf you donâ€™t want the ```@Before``` or ```@After``` methods to intercept all request, you can specify a list of actions using ```only``` param:\r\n\r\n```java\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport servletio.*;\r\nimport servletio.annotation.*;\r\n\r\n@WebServlet(\"/base-path/*\")\r\npublic class MyApp extends ServletIO {\r\n    \r\n    @Get\r\n    public Result login(Request req){\r\n    \treturn respond(\"<h1>login</h1>\").as(\"text/html\");\r\n    }\r\n    \r\n    @Before(only=\"/admin\")\r\n    public void validateUser(Request req, Response res){\r\n        if(req.session().attribute(\"user\")==null)  \r\n            res.redirect(\"login\");\r\n    }\r\n    \r\n    @After(only={\"/login\", \"/logout\"})\r\n    public void log(Request req, Response res){\r\n        System.out.prinln(\"/login or /logout executed\")\r\n    }\r\n    \r\n    ...\r\n}\r\n```\r\n\r\nOr you can specify a list of actions to exclude for ```@After``` or ```@Before``` using the ```unless``` param:\r\n\r\n```java\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport servletio.*;\r\nimport servletio.annotation.*;\r\n\r\n@WebServlet(\"/base-path/*\")\r\npublic class MyApp extends ServletIO {\r\n    \r\n    @Before(unless=\"/login\")\r\n    public void validateUser(Request req, Response res){\r\n        if(req.session().attribute(\"user\")==null)\r\n            req.dispatcher(\"login\").forward(req, res);\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nYou can set execution priority of ```@Before``` or ```@After``` methods using ```priority``` param, example ```@Before(priority=1)```, by default priority is 0 (executed first):\r\n\r\n```java\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport servletio.*;\r\nimport servletio.annotation.*;\r\n\r\n@WebServlet(\"/base-path/*\")\r\npublic class MyApp extends ServletIO {\r\n    \r\n    @Before(only=\"/admin/something\", priority=2)\r\n    public void adminSomething(Request req, Response res){\r\n        //some filter for this action\r\n    }\r\n    \r\n    @Before(only=\"/admin/*\", priority=1)\r\n    public void validateUser(Request req, Response res){\r\n        if(req.session().attribute(\"user\")==null)\r\n            res.redirect(\"login\");\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### Request and Response\r\n\r\nYou can either use ```Request``` or ```Response``` only as method parameters. This classes wrap HttpServletRequest and HttpServletResponse and offer some facilities. The most prominents are:\r\n\r\n###### Request\r\n- ```request.bindParam(MyBean.class)``` return a instance of ```MyBean``` with all values of HTML form, mapping by bean properties names.\r\n- ```request.getFile(String paramName)``` return a File with the uploaded file reference.\r\n- ```request.dispatcher(String dispatcherName)``` return an instance of ```servletio.Dispatcher```, wrap of ```RequestDispatcher```.\r\n- ```request.raw``` final propierty with ```HttpServletRequest``` object reference of the current request.\r\n\r\n###### Response\r\n- ```response.print(String htmlString, String contentType)```.\r\n- ```response.print(String text)``` print text plain.\r\n- ```response.printHtml(String htmlString)``` print text with HTML content type.\r\n- ```response.printXml(String xmlString)``` print text with XML content type.\r\n- ```response.printJson(String xmlString)``` print text with JSON content type.\r\n- ```response.redirect(String location)``` redirect to the specified location.\r\n- ```response.redirect(String location, int httpStatusCode)``` redirect to the specified location with status code.\r\n- ```response.sendError(int error)``` send custom error code to the browser.\r\n- ```response.sendBadRequest()``` sen 400 error code to the browser.\r\n- ```response.sendInternalServerError()``` send 500 error code to the browser.\r\n- ```response.raw``` final propierty with ```HttpServletResponse``` object reference of the current request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}